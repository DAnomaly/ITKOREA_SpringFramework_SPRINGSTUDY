FILE 설정 방법

1. web.xml에 아래 태그를 추가한다. (인코딩)
	<!-- 인코딩 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

2. porm.xml 최신화를 진행한다.
	>> SRPING : 5.1.4.RELEASE
 
3. ojdbc6.jar
   * 아래 2가지 중 한 가지만 사용한다.
   1) pom.xml 디펜던시 추가하기 (비추천)
	<repositories>
		<repository>
			<id>oracle</id>
			<name>Oracle JDBC Repository</name>
			<url>https://maven.jahia.org/maven2</url>
		</repository>
	</repositories>
	<dependencies>
		<!-- ojdbc6.jar -->
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc6</artifactId>
			<version>12.1.0.2</version>
		</dependency>
	</dependencies>

	2) tomcat\lib 디렉터리에 ojdbc6.jar 추가하기
		2-1)
		'\apache-tomcat-8.5.65\lib' 에 ojdbc6.jar 추가
		2-2)
		기존에 Spring(Eclipse)에 추가된 Server가 있다면 삭제 후 다시 생성

4. spring-jdbc 디펜던시를 추가한다. (spring-framework 버전과 맞춘다.)
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	    <version>5.1.4.RELEASE</version>
	</dependency>

5. DataSource를 사용하는 JdbcTemplate template bean을 생성한다.
	1) root-context.xml
	<bean id="dataSource" class="...DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe"/>
		<property name="username" value="spring"/>
		<proprety name="password" value="1111"/>
	</bean>
	<bean id="template" class="...JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<bean id="multipartResolver" class="...CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"/>
		<property name="maxUploadSize" value="10485760"/>
	</bean>
	2) BeanConfiguration.java
	@Bean
	public DriverManagerDataSource dataSource() {
		DriverManagerDataSource dataSource = new DriverManagerDataSource();
		dataSource.setDriverClassName("oracle.jdbc.OracleDriver");
		dataSource.setUrl("jdbc:oracle:thin:@127.0.0.1:1521:xe");
		dataSource.setUsername("spring");
		dataSource.setPassword("1111");
		return dataSource;
	}
	@Bean
	public SqlSessionFactory sqlSessionFactory() throws Exception {
		SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
		sqlSessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath:com/koreait/file/dao/*.xml"));
		sqlSessionFactory.setDataSource(dataSource());
		return sqlSessionFactory.getObject();
	}
	@Bean
	public SqlSessionTemplate sqlSession() throws Exception {
		return new SqlSessionTemplate(sqlSessionFactory());
	}
	@Bean
	public CommonsMultipartResolver multipartResolver() {
		CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();
		multipartResolver.setDefaultEncoding("UTF-8");
		multipartResolver.setMaxUploadSize(1024 * 1024 * 10);
		return multipartResolver; 
	}
	
6.	파일 처리용 디펜던시를 추가한다.
	<!-- commons-io -->
	<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
	<dependency>
	    <groupId>commons-io</groupId>
	    <artifactId>commons-io</artifactId>
	    <version>2.6</version>
	</dependency>
	
	<!-- commons-fileupload -->
	<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
	<dependency>
	    <groupId>commons-fileupload</groupId>
	    <artifactId>commons-fileupload</artifactId>
	    <version>1.3.3</version>
	</dependency>
	